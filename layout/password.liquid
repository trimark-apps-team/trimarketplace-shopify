<!doctype html>
<html class="js full-height" lang="{{ request.locale.iso_code }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="theme-color" content="">
    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon != blank -%}
      <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 32, height: 32 }}">
    {%- endif -%}

    {%- unless settings.type_header_font.system? -%}
      <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>
    {%- endunless -%}

    <title>{{ shop.name }}</title>

    <meta name="description" content="{{ page_description | escape }}">

    {% render 'meta-tags' %}

    {{ content_for_header }}

    {%- liquid
      assign body_font_bold = settings.type_body_font | font_modify: 'weight', 'bold'
      assign body_font_italic = settings.type_body_font | font_modify: 'style', 'italic'
      assign body_font_bold_italic = body_font_bold | font_modify: 'style', 'italic'
    %}

    {% style %}
      {{ settings.type_body_font | font_face: font_display: 'swap' }}
      {{ body_font_bold | font_face: font_display: 'swap' }}
      {{ body_font_italic | font_face: font_display: 'swap' }}
      {{ body_font_bold_italic | font_face: font_display: 'swap' }}
      {{ settings.type_header_font | font_face: font_display: 'swap' }}

      {% for scheme in settings.color_schemes -%}
        {% assign scheme_classes = scheme_classes | append: ', .color-' | append: scheme.id %}
        {% if forloop.index == 1 -%}
          :root,
        {%- endif %}
        .color-{{ scheme.id }} {
          --color-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
          {% if scheme.settings.background_gradient != empty %}
            --gradient-background: {{ scheme.settings.background_gradient }};
          {% else %}
            --gradient-background: {{ scheme.settings.background }};
          {% endif %}
          --color-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
          --color-shadow: {{ scheme.settings.shadow.red }},{{ scheme.settings.shadow.green }},{{ scheme.settings.shadow.blue }};
          --color-button: {{ scheme.settings.button.red }},{{ scheme.settings.button.green }},{{ scheme.settings.button.blue }};
          --color-button-text: {{ scheme.settings.button_label.red }},{{ scheme.settings.button_label.green }},{{ scheme.settings.button_label.blue }};
          --color-secondary-button: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
          --color-secondary-button-text: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
          --color-link: {{ scheme.settings.secondary_button_label.red }},{{ scheme.settings.secondary_button_label.green }},{{ scheme.settings.secondary_button_label.blue }};
          --color-badge-foreground: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
          --color-badge-background: {{ scheme.settings.background.red }},{{ scheme.settings.background.green }},{{ scheme.settings.background.blue }};
          --color-badge-border: {{ scheme.settings.text.red }},{{ scheme.settings.text.green }},{{ scheme.settings.text.blue }};
          --payment-terms-background-color: rgb({{ scheme.settings.background.rgb }});
        }
      {% endfor %}

      {{ scheme_classes | prepend: 'body' }} {
        color: rgba(var(--color-foreground), 0.75);
        background-color: rgb(var(--color-background));
      }

      :root {
        --font-body-family: {{ settings.type_body_font.family }}, {{ settings.type_body_font.fallback_families }};
        --font-body-style: {{ settings.type_body_font.style }};
        --font-body-weight: {{ settings.type_body_font.weight }};

        --font-heading-family: {{ settings.type_header_font.family }}, {{ settings.type_header_font.fallback_families }};
        --font-heading-style: {{ settings.type_header_font.style }};
        --font-heading-weight: {{ settings.type_header_font.weight }};

        --font-body-scale: {{ settings.body_scale | divided_by: 100.0 }};
        --font-heading-scale: {{ settings.heading_scale | times: 1.0 | divided_by: settings.body_scale }};
        --media-padding: {{ settings.media_padding }}px;
        --media-border-opacity: {{ settings.media_border_opacity | divided_by: 100.0 }};
        --media-border-width: {{ settings.media_border_thickness }}px;
        --media-radius: {{ settings.media_radius }}px;
        --media-shadow-opacity: {{ settings.media_shadow_opacity | divided_by: 100.0 }};
        --media-shadow-horizontal-offset: {{ settings.media_shadow_horizontal_offset }}px;
        --media-shadow-vertical-offset: {{ settings.media_shadow_vertical_offset }}px;
        --media-shadow-blur-radius: {{ settings.media_shadow_blur }}px;
        --media-shadow-visible: {% if settings.media_shadow_opacity > 0 %}1{% else %}0{% endif %};

        --page-width: {{ settings.page_width | divided_by: 10 }}rem;
        --page-width-margin: {% if settings.page_width == '1600' %}2{% else %}0{% endif %}rem;

        --product-card-image-padding: {{ settings.card_image_padding | divided_by: 10.0 }}rem;
        --product-card-corner-radius: {{ settings.card_corner_radius | divided_by: 10.0 }}rem;
        --product-card-text-alignment: {{ settings.card_text_alignment }};
        --product-card-border-width: {{ settings.card_border_thickness | divided_by: 10.0 }}rem;
        --product-card-border-opacity: {{ settings.card_border_opacity | divided_by: 100.0 }};
        --product-card-shadow-opacity: {{ settings.card_shadow_opacity | divided_by: 100.0 }};
        --product-card-shadow-visible: {% if settings.card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --product-card-shadow-horizontal-offset: {{ settings.card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --product-card-shadow-vertical-offset: {{ settings.card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --product-card-shadow-blur-radius: {{ settings.card_shadow_blur | divided_by: 10.0 }}rem;

        --collection-card-image-padding: {{ settings.collection_card_image_padding | divided_by: 10.0 }}rem;
        --collection-card-corner-radius: {{ settings.collection_card_corner_radius | divided_by: 10.0 }}rem;
        --collection-card-text-alignment: {{ settings.collection_card_text_alignment }};
        --collection-card-border-width: {{ settings.collection_card_border_thickness | divided_by: 10.0 }}rem;
        --collection-card-border-opacity: {{ settings.collection_card_border_opacity | divided_by: 100.0 }};
        --collection-card-shadow-opacity: {{ settings.collection_card_shadow_opacity | divided_by: 100.0 }};
        --collection-card-shadow-visible: {% if settings.collection_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --collection-card-shadow-horizontal-offset: {{ settings.collection_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --collection-card-shadow-vertical-offset: {{ settings.collection_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --collection-card-shadow-blur-radius: {{ settings.collection_card_shadow_blur | divided_by: 10.0 }}rem;

        --blog-card-image-padding: {{ settings.blog_card_image_padding | divided_by: 10.0 }}rem;
        --blog-card-corner-radius: {{ settings.blog_card_corner_radius | divided_by: 10.0 }}rem;
        --blog-card-text-alignment: {{ settings.blog_card_text_alignment }};
        --blog-card-border-width: {{ settings.blog_card_border_thickness | divided_by: 10.0 }}rem;
        --blog-card-border-opacity: {{ settings.blog_card_border_opacity | divided_by: 100.0 }};
        --blog-card-shadow-opacity: {{ settings.blog_card_shadow_opacity | divided_by: 100.0 }};
        --blog-card-shadow-visible: {% if settings.blog_card_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --blog-card-shadow-horizontal-offset: {{ settings.blog_card_shadow_horizontal_offset | divided_by: 10.0 }}rem;
        --blog-card-shadow-vertical-offset: {{ settings.blog_card_shadow_vertical_offset | divided_by: 10.0 }}rem;
        --blog-card-shadow-blur-radius: {{ settings.blog_card_shadow_blur | divided_by: 10.0 }}rem;

        --badge-corner-radius: {{ settings.badge_corner_radius | divided_by: 10.0 }}rem;

        --spacing-sections-desktop: {{ settings.spacing_sections }}px;
        --spacing-sections-mobile: {% if settings.spacing_sections < 24 %}{{ settings.spacing_sections }}{% else %}{{ settings.spacing_sections | times: 0.7 | round | at_least: 20 }}{% endif %}px;

        --grid-desktop-vertical-spacing: {{ settings.spacing_grid_vertical }}px;
        --grid-desktop-horizontal-spacing: {{ settings.spacing_grid_horizontal }}px;
        --grid-mobile-vertical-spacing: {{ settings.spacing_grid_vertical | divided_by: 2 }}px;
        --grid-mobile-horizontal-spacing: {{ settings.spacing_grid_horizontal | divided_by: 2 }}px;

        --text-boxes-border-opacity: {{ settings.text_boxes_border_opacity | divided_by: 100.0 }};
        --text-boxes-border-width: {{ settings.text_boxes_border_thickness }}px;
        --text-boxes-radius: {{ settings.text_boxes_radius }}px;
        --text-boxes-shadow-opacity: {{ settings.text_boxes_shadow_opacity | divided_by: 100.0 }};
        --text-boxes-shadow-visible: {% if settings.text_boxes_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --text-boxes-shadow-horizontal-offset: {{ settings.text_boxes_shadow_horizontal_offset }}px;
        --text-boxes-shadow-vertical-offset: {{ settings.text_boxes_shadow_vertical_offset }}px;
        --text-boxes-shadow-blur-radius: {{ settings.text_boxes_shadow_blur }}px;

        --buttons-radius: {{ settings.buttons_radius }}px;
        --buttons-radius-outset: {% if settings.buttons_radius > 0 %}{{ settings.buttons_radius | plus: settings.buttons_border_thickness }}{% else %}0{% endif %}px;
        --buttons-border-width: {% if settings.buttons_border_opacity > 0 %}{{ settings.buttons_border_thickness }}{% else %}0{% endif %}px;
        --buttons-border-opacity: {{ settings.buttons_border_opacity | divided_by: 100.0 }};
        --buttons-shadow-opacity: {{ settings.buttons_shadow_opacity | divided_by: 100.0 }};
        --buttons-shadow-visible: {% if settings.buttons_shadow_opacity > 0 %}1{% else %}0{% endif %};
        --buttons-shadow-horizontal-offset: {{ settings.buttons_shadow_horizontal_offset }}px;
        --buttons-shadow-vertical-offset: {{ settings.buttons_shadow_vertical_offset }}px;
        --buttons-shadow-blur-radius: {{ settings.buttons_shadow_blur }}px;
        --buttons-border-offset: {% if settings.buttons_radius > 0 or settings.buttons_shadow_opacity > 0 %}0.3{% else %}0{% endif %}px;

        --inputs-radius: {{ settings.inputs_radius }}px;
        --inputs-border-width: {{ settings.inputs_border_thickness }}px;
        --inputs-border-opacity: {{ settings.inputs_border_opacity | divided_by: 100.0 }};
        --inputs-shadow-opacity: {{ settings.inputs_shadow_opacity | divided_by: 100.0 }};
        --inputs-shadow-horizontal-offset: {{ settings.inputs_shadow_horizontal_offset }}px;
        --inputs-margin-offset: {% if settings.inputs_shadow_vertical_offset != 0 and settings.inputs_shadow_opacity > 0 %}{{ settings.inputs_shadow_vertical_offset | abs }}{% else %}0{% endif %}px;
        --inputs-shadow-vertical-offset: {{ settings.inputs_shadow_vertical_offset }}px;
        --inputs-shadow-blur-radius: {{ settings.inputs_shadow_blur }}px;
        --inputs-radius-outset: {% if settings.inputs_radius > 0 %}{{ settings.inputs_radius | plus: settings.inputs_border_thickness }}{% else %}0{% endif %}px;

        --variant-pills-radius: {{ settings.variant_pills_radius }}px;
        --variant-pills-border-width: {{ settings.variant_pills_border_thickness }}px;
        --variant-pills-border-opacity: {{ settings.variant_pills_border_opacity | divided_by: 100.0 }};
        --variant-pills-shadow-opacity: {{ settings.variant_pills_shadow_opacity | divided_by: 100.0 }};
        --variant-pills-shadow-horizontal-offset: {{ settings.variant_pills_shadow_horizontal_offset }}px;
        --variant-pills-shadow-vertical-offset: {{ settings.variant_pills_shadow_vertical_offset }}px;
        --variant-pills-shadow-blur-radius: {{ settings.variant_pills_shadow_blur }}px;
      }
    {% endstyle %}

    {%- unless settings.type_body_font.system? -%}
      {% comment %}theme-check-disable AssetPreload{% endcomment %}
      <link rel="preload" as="font" href="{{ settings.type_body_font | font_url }}" type="font/woff2" crossorigin>
      {% comment %}theme-check-enable AssetPreload{% endcomment %}
    {%- endunless -%}
    {%- unless settings.type_header_font.system? -%}
      {% comment %}theme-check-disable AssetPreload{% endcomment %}
      <link rel="preload" as="font" href="{{ settings.type_header_font | font_url }}" type="font/woff2" crossorigin>
      {% comment %}theme-check-enable AssetPreload{% endcomment %}
    {%- endunless -%}

    {{ 'section-password.css' | asset_url | stylesheet_tag }}
    {{ 'base.css' | asset_url | stylesheet_tag }}
    {{ 'component-list-social.css' | asset_url | stylesheet_tag }}

    <script src="{{ 'global.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'details-modal.js' | asset_url }}" defer="defer"></script>
    <script src="{{ 'password-modal.js' | asset_url }}" defer="defer"></script>


<!-- <script>
  const storeDomain = 'trimark-demo.myshopify.com';
  const accessToken = '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';

  const companyId = "{{ customer.current_company.id }}";
  const companyLocationId = "{{ customer.current_location.id }}";
  const customerEmail = "{{ customer.email }}";

  function showPopup(message, isError = false) {
    const popup = document.getElementById('popup-message');
    const popupContent = document.getElementById('popup-content');
    popupContent.innerHTML = message;
    document.getElementById('popup-overlay').style.visibility = 'visible';
    popup.style.display = 'block';
    popup.classList.toggle('error', isError);
  }

  document.querySelector("#close").addEventListener('click', () => {
    document.getElementById('popup-message').style.display = 'none';
    document.getElementById('popup-overlay').style.visibility = 'hidden';
  });

  async function fetchCompanyData(companyId) {
    const query = `
      {
        company(id: "gid://shopify/Company/${companyId}") {
          id
          name
          mainContact { id }
          approver1Threshold: metafield(namespace: "custom", key: "approver_1_cart_threshold") { value }
          approver2Threshold: metafield(namespace: "custom", key: "approver_2_cart_threshold") { value }
          levelOfApproval: metafield(namespace: "custom", key: "level_of_approval_required") { value }
        }
      }
    `;

    const response = await fetch(`https://${storeDomain}/admin/api/2025-04/graphql.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': accessToken
      },
      body: JSON.stringify({ query })
    });

    const result = await response.json();
    const data = result.data?.company || {};
    return {
      contactId: data?.mainContact?.id,
      threshold1: parseFloat(data?.approver1Threshold?.value || 0),
      threshold2: parseFloat(data?.approver2Threshold?.value || 0),
      levelOfApproval: data?.levelOfApproval?.value
    };
  }

  async function fetchApprovers(companyId, level = 1) {
    const query = `
      {
        company(id: "gid://shopify/Company/${companyId}") {
          contacts(first: 100) {
            edges {
              node {
                customer {
                  id
                  metaField1: metafield(namespace: "custom", key: "is_approver") { value }
                  metaField2: metafield(namespace: "custom", key: "approval_level") { value }
                  defaultEmailAddress { emailAddress }
                }
              }
            }
          }
        }
      }
    `;

    const response = await fetch(`https://${storeDomain}/admin/api/2025-04/graphql.json`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': accessToken
      },
      body: JSON.stringify({ query })
    });

    const result = await response.json();
    const contacts = result?.data?.company?.contacts?.edges || [];

    return contacts
      .filter(edge => {
        const customer = edge.node.customer;
        return customer &&
          customer.metaField1?.value === "true" &&
          parseInt(customer.metaField2?.value || 0) === level;
      })
      .map(edge => edge.node.customer?.defaultEmailAddress?.emailAddress)
      .filter(email => email);
  }

  document.addEventListener('click', async (e) => {
    if (e.target && e.target.id === 'create-draft-order') {
      try {
        const { contactId, threshold1, threshold2, levelOfApproval } = await fetchCompanyData(companyId);
        const deputyApprovalRequired = levelOfApproval === "2";

        if (!contactId) {
          showPopup('No main contact found for company', true);
          return;
        }

        const cartRes = await fetch('/cart.js');
        const cart = await cartRes.json();

        if (!cart.items?.length) {
          showPopup('Cart is empty!', true);
          return;
        }

        const cartTotal = parseFloat(cart.total_price) / 100;

        // Determine approver level
        let approverLevel = 1;
        if (levelOfApproval === "2") {
          if (cartTotal > threshold2) {
            approverLevel = 2;
          } else {
            approverLevel = 1;
          }
        }

        const approvers = await fetchApprovers(companyId, approverLevel);

        if (!approvers.length) {
          showPopup(`No approvers found at level ${approverLevel}.`, true);
          return;
        }

        const lineItems = cart.items.map(item => {
          const customAttributes = item.properties
            ? Object.entries(item.properties).map(([key, value]) => `{ key: "${key}", value: "${value}" }`).join(', ')
            : '';
          return `{
            variantId: "gid://shopify/ProductVariant/${item.variant_id}",
            quantity: ${item.quantity},
            customAttributes: [${customAttributes}]
          }`;
        }).join(',');

        const draftOrderQuery = `
          mutation {
            draftOrderCreate(
              input: {
                lineItems: [${lineItems}],
                note: "Created from storefront cart with properties",
                email: "${customerEmail}",
                purchasingEntity: {
                  purchasingCompany: {
                    companyContactId: "${contactId}",
                    companyId: "gid://shopify/Company/${companyId}",
                    companyLocationId: "gid://shopify/CompanyLocation/${companyLocationId}"
                  }
                }
              }
            ) {
              draftOrder {
                id
                name
                invoiceUrl
                shippingAddress {
                  address1
                  city
                  country
                  zip
                  phone
                }
              }
              userErrors {
                field
                message
              }
            }
          }
        `;

        const draftRes = await fetch(`https://${storeDomain}/admin/api/2024-04/graphql.json`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Access-Token': accessToken
          },
          body: JSON.stringify({ query: draftOrderQuery })
        });

        const draftData = await draftRes.json();
        const draftOrder = draftData?.data?.draftOrderCreate?.draftOrder;

        if (!draftOrder) {
          showPopup('Failed to create draft order.', true);
          return;
        }

        const orderDetails = {
          orderId: draftOrder.id,
          customerEmail,
          shippingAddress: draftOrder.shippingAddress,
          total: cartTotal,
          items: cart.items.map(i => ({
            title: i.product_title,
            quantity: i.quantity,
            variant: i.variant_title
          }))
        };

        const orderDetailsString = JSON.stringify(JSON.stringify(orderDetails));
        const metaobjectQuery = `
          mutation {
            metaobjectCreate(
              metaobject: {
                type: "approval_orders"
                fields: [
                  { key: "approval_email", value: "${approvers[0]}" }
                  { key: "approval_status", value: "true" }
                  { key: "order_details", value: ${orderDetailsString} }
                  { key: "order_id", value: "${draftOrder.id}" }
                  { key: "deputy_approval_required", value: "${deputyApprovalRequired}" }
                ]
              }
            ) {
              metaobject { id handle }
              userErrors { field message }
            }
          }
        `;

        const metaRes = await fetch(`https://${storeDomain}/admin/api/2025-04/graphql.json`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Access-Token': accessToken
          },
          body: JSON.stringify({ query: metaobjectQuery })
        });

        const metaResult = await metaRes.json();
        const metaErrors = metaResult?.data?.metaobjectCreate?.userErrors;

        if (metaErrors?.length) {
          console.error('Metaobject errors:', metaErrors);
          showPopup('Approval metaobject failed to create.', true);
        } else {
          console.log("Metaobject created");
          showPopup("");
        }

      } catch (error) {
        console.error('Error:', error);
        showPopup('An unexpected error occurred.', true);
      }
    }
  });
</script> -->

    
  </head>

  <body class="password gradient">
    <a class="skip-to-content-link button visually-hidden" href="#MainContent">
      {{ 'accessibility.skip_to_text' | t }}
    </a>

    {% section 'main-password-header' %}

    <main id="MainContent" class="password-main">
      {{ content_for_layout }}
      {% section 'main-password' %}
    </main>
    <footer>
      {% section 'main-password-footer' %}
    </footer>
    <ul hidden>
      <li id="a11y-new-window-message">{{ 'accessibility.link_messages.new_window' | t }}</li>
    </ul>
  </body>
</html>
