<div class="quick-order-controls page-width">
  
  <button id="cart-click" class="button"><span class="cart-items_count"> Cart ({{ cart.items.size }} Products, {{ cart.item_count }} Quantities)</span></button>
  
  <div class="quick-order-controls__inner">
    <input
      type="text"
      id="quick-order-search"
      placeholder="Search by title, price, type or SKU"
      class="quick-order-search-input"
    >

    <select id="quick-order-sort" class="quick-order-sort-select">
      <option value="recent">Recently Purchased</option>
      <option value="az">Title: A → Z</option>
      <option value="za">Title: Z → A</option>
      <option value="plh">Price: Low → High</option>
      <option value="phl">Price: High → Low</option>
      <option value="inv_low">Inventory: Low → High</option>
      <option value="inv_high">Inventory: High → Low</option>
    </select>

      <div class="dropdown-collection">
          <input type="text" id="collection-search" placeholder="Search collections..." class="collection-search-input">
          <div class="dropdown-menu hidden">
        
        <div id="quick-order-collections" class="quick-order-collections">
          {% for collection in collections %}
            {% unless collection.title == "Best selling" %}
              <label>
                <input type="checkbox" class="collection-filter" value="{{ collection.handle }}">
                {{ collection.title }}
              </label>
            {% endunless %}
          {% endfor %}
        </div>
      </div>
      </div>
  </div>
</div>



<div class="quick-order_loader"></div>


        {% comment %} {% assign best_selling_rank = forloop.index0 %} {% endcomment %}
          <div class="quick-order-list-container">
            <quick-order-list
              class="page-width"
              id="{{ section.id }}-{{ product.id }}"
              data-section="{{ section.id }}"
              data-product-id="{{ product.id }}"
              data-url="{{ product.url }}"
            >
            
              <div class="quick-order-list__container" id="main-variant-items">
                <table class="quick-order-list__table">
                  <caption class="visually-hidden">
                    {{ 'sections.cart.title' | t }}
                  </caption>
                  <thead>
                    <tr>
                      <th class="caption-with-letter-spacing" scope="col">
                       {%- if product.has_only_default_variant -%} {{ 'sections.quick_order_list.product' | t }} {%- else -%} {{ 'sections.quick_order_list.variant' | t }} {%- endif -%}
                      </th>
                      <th class="large-up-hide right caption-with-letter-spacing" scope="col">
                       {%- if product.has_only_default_variant -%} {{ 'sections.quick_order_list.product_total' | t }} {%- else -%} {{ 'sections.quick_order_list.variant_total' | t }} {%- endif -%}
                      </th>
                      <th
                        class="quick-order-list__table-heading--wide small-hide medium-hide caption-with-letter-spacing"
                        scope="col"
                      >
                      Action
                      </th>
                      <th
                        class="quick-order-list__table-heading--wide small-hide medium-hide caption-with-letter-spacing"
                        scope="col"
                        style="text-align: center; padding-left: 0;"
                      >
                      {{ 'products.product.quantity.label' | t }}
                      </th>
                      <th
                        class="quick-order-list__table-heading--wide small-hide medium-hide caption-with-letter-spacing"
                        scope="col"
                      >
                       {{ 'sections.cart.headings.price' | t }}
                      </th>
                      <th class="small-hide medium-hide right caption-with-letter-spacing" scope="col">
                        {%- if product.has_only_default_variant -%} {{ 'sections.quick_order_list.product_total' | t }} {%- else -%} {{ 'sections.quick_order_list.variant_total' | t }} {%- endif -%}
                      </th>
                    </tr>
                  </thead>
                  <tbody id="quick-order-products" class="hidden">
                      {% paginate collections["best-selling"].products by 1000 %}
  
   {% assign recent_products = collections["best-selling"].products | sort: 'metafields.custom.purchased_date.value' | reverse %}
      {% for product in recent_products %}
                     {%- if product.has_only_default_variant -%}
                      {%- render 'quick-order-list-row',
                        item: product,
                        data: product,
                        image: product.featured_media,
                        sku: product.selected_or_first_available_variant.sku,
                        variant: product.selected_or_first_available_variant,
                        show_image: show_image,
                        show_sku: show_sku,
                        is_modal: is_modal
                      -%}
                        {%- else -%}
                      {%- for variant in product.variants -%}
                        {%- render 'quick-order-list-row',
                          item: variant,
                          data: product,
                          image: variant.image,
                          sku: variant.sku,
                          variant: variant,
                          show_image: show_image,
                          show_sku: show_sku,
                          is_modal: is_modal
                        -%}
                      {%- endfor -%}

                    {%- endif -%}
                    {% endfor %}
   {% endpaginate %}
                  </tbody>
                </table>
              </div>
              <p
                class="visually-hidden"
                id="quick-order-list-live-region-text-{{ product.id }}"
                aria-live="polite"
                role="status"
              ></p>
              <p
                class="visually-hidden"
                id="shopping-cart-variant-item-status"
                aria-live="polite"
                aria-hidden="true"
                role="status"
              >
                {{ 'accessibility.loading' | t }}
              </p>
    
          </quick-order-list>
          <template id="QuickOrderListErrorTemplate-{{ product.id }}">
            <span class="svg-wrapper"> {{ 'icon-error.svg' | inline_asset_content }} </span>
            <span class="quick-order-list-error-message caption-large" role="alert"></span>
          </template>
          </div>
   


<div id="quick-order-pagination" class="pagination-controls">
  <button id="prev-page" disabled>Prev</button>
  <span id="page-info"></span>
  <button id="next-page">Next</button>
</div>

<div id="no-results" class="no-results-message hidden">
  No products found matching your search.
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const searchInput = document.getElementById('quick-order-search');
  const sortSelect = document.getElementById('quick-order-sort');
  const collectionCheckboxes = document.querySelectorAll('.collection-filter');
  const collectionSearch = document.getElementById('collection-search');
  const dropdownToggle = document.querySelector('#collection-search');
  const dropdownMenu = document.querySelector('.dropdown-menu');
  const container = document.getElementById('quick-order-products');
  const items = Array.from(container.children);
  const pagination = document.getElementById('quick-order-pagination');
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  const pageInfo = document.getElementById('page-info');
  const noResults = document.getElementById('no-results');

  const ITEMS_PER_PAGE = 20;
  let currentPage = 1;
  let filteredItems = [...items];

  dropdownToggle.addEventListener('focus', () => {
    dropdownMenu.classList.remove('hidden');
  });

document.addEventListener("click", e => {
    if (!dropdownMenu.contains(e.target) && e.target !== dropdownToggle) {
      dropdownMenu.classList.add('hidden');
    }
  });


  collectionSearch.addEventListener('input', function () {
    const val = this.value.toLowerCase();
    document.querySelectorAll('#quick-order-collections label').forEach(label => {
      const text = label.textContent.toLowerCase();
      label.style.display = text.includes(val) ? '' : 'none';
    });
  });

  function applyFilters() {
    const searchVal = searchInput.value.toLowerCase();
    const sortVal = sortSelect.value;

    const selectedCollections = Array.from(collectionCheckboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);


    filteredItems = items.filter(el => {
      const title = el.dataset.title.toLowerCase();
      const price = el.dataset.price;
      const sku = el.dataset.sku.toLowerCase();
      const type = el.dataset.type.toLowerCase();
      const collections = el.dataset.collection.toLowerCase().split(",");

      const matchesSearch =
        title.includes(searchVal) ||
        price.includes(searchVal) ||
        sku.includes(searchVal) || 
        collections.includes(searchVal) || 
        type.includes(searchVal);

      const matchesCollection =
      selectedCollections.length === 0 ||
      selectedCollections.some(c => collections.includes(c));

      return matchesSearch && matchesCollection;
    });

 
    filteredItems.sort((a, b) => {
      switch (sortVal) {
        case 'az': return a.dataset.title.localeCompare(b.dataset.title);
        case 'za': return b.dataset.title.localeCompare(a.dataset.title);
        case 'plh': return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
        case 'phl': return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
        {% comment %} case 'recent': return parseInt(a.dataset.bestselling) - parseInt(b.dataset.bestselling); {% endcomment %}
        case 'recent': return new Date(b.dataset.recent || 0) - new Date(a.dataset.recent || 0);
        case 'inv_low': return parseInt(a.dataset.inventory) - parseInt(b.dataset.inventory);
        case 'inv_high': return parseInt(b.dataset.inventory) - parseInt(a.dataset.inventory);
      }
    });

    currentPage = 1;
    renderPage();
  }

  function renderPage() {
    container.innerHTML = '';
    const start = (currentPage - 1) * ITEMS_PER_PAGE;
    const end = start + ITEMS_PER_PAGE;
    const paginatedItems = filteredItems.slice(start, end);

    if (paginatedItems.length === 0) {
      noResults.classList.remove('hidden');
      pagination.style.display = 'none';
    } else {
      noResults.classList.add('hidden');
      pagination.style.display = 'flex';
      paginatedItems.forEach(el => container.appendChild(el));
    }

    pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(filteredItems.length / ITEMS_PER_PAGE)}`;
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === Math.ceil(filteredItems.length / ITEMS_PER_PAGE);

    document.querySelector("#quick-order-products").classList.remove("hidden");
    document.querySelector(".quick-order_loader").classList.add("hidden");
  }

  function debounce(func, delay) {
    let timer;
    return function (...args) {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), delay);
    }
  }

  searchInput.addEventListener('input', debounce(applyFilters, 300));
  sortSelect.addEventListener('change', applyFilters);
  collectionCheckboxes.forEach(cb => cb.addEventListener('change', applyFilters));
  prevBtn.addEventListener('click', () => { currentPage--; renderPage(); });
  nextBtn.addEventListener('click', () => { currentPage++; renderPage(); });

  applyFilters();
});

</script>

