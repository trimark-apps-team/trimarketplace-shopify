if(window.approval_required) {
document.addEventListener("click", function (e) {
  if (e.target && e.target.classList.contains("edit-tier-price-btn")) {
    const button = e.target;
    const line = button.dataset.line;
    const input = document.querySelector(`.tier-price-input[data-line="${line}"]`);
    const text = document.querySelector(`.tier-price-text[data-line="${line}"]`);

    if (!input || !text) return;

    // Save original value
    const original = input.value;

    // Hide text, show input
    text.style.display = "none";
    input.style.display = "inline-block";
    input.focus();

    // Create or reuse error span
    let errorSpan = document.querySelector(`.tier-price-error[data-line="${line}"]`);
    if (!errorSpan) {
      errorSpan = document.createElement("span");
      errorSpan.className = "tier-price-error";
      errorSpan.dataset.line = line;
      errorSpan.style.color = "red";
      errorSpan.style.fontSize = "12px";
      errorSpan.style.marginLeft = "8px";
      input.closest("tr.cart-item").after(errorSpan);
    }

    const handleBlur = () => {
      input.removeEventListener("blur", handleBlur);

      let newPrice = parseFloat(input.value);
      if (isNaN(newPrice) || newPrice < 1 || newPrice > 1000) {
        errorSpan.textContent = "Enter a price between $1 and $1000";
        input.value = original;
        input.style.display = "none";
        text.style.display = "inline";
        return;
      }

      // Valid: Clear error
      errorSpan.textContent = "";

      newPrice = newPrice.toFixed(2);
      const lineIndex = parseInt(line);

      fetch("/cart.js")
        .then(res => res.json())
        .then(cart => {
          const lineItem = cart.items[lineIndex];
          if (!lineItem) return;

          const updatedProperties = { ...(lineItem.properties || {}) };
          updatedProperties["_Tier Price"] = document.body.dataset.symbol + newPrice;

          return fetch("/cart/change.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify({
              id: lineItem.key,
              quantity: lineItem.quantity,
              properties: updatedProperties
            })
          });
        })
        .then(response => {
          if (response && response.ok) {
            button.closest(".cart-item").querySelector(".loading__spinner").classList.remove("hidden");
            refreshCart();
          }
        })
        .catch(err => {
          console.error("Error updating tier price:", err);
        });

      text.textContent = document.body.dataset.symbol + newPrice;
      text.style.display = "inline";
      input.style.display = "none";
    };

    input.addEventListener("blur", handleBlur);
  }
});

function checkAndToggleCheckoutButtons(cart) {
    if (!cart) return;

   const approvalRequired = cart.total_price >= window.draftorder_threshold;

    const checkoutButtons = document.querySelectorAll('button[name="checkout"]');
    for (const btn of checkoutButtons) {
      if (approvalRequired) {
        console.log('Disabling checkout due to approval flag');
        btn.classList.add("hidden");
        document.querySelectorAll("#create-draft-order").forEach(el => {
          el.classList.remove("hidden");
        });
      } else {
        console.log('Enabling checkout (no approval required)');
        document.querySelectorAll("#create-draft-order").forEach(el => {
          el.classList.add("hidden");
        });
        btn.classList.remove("hidden");
      }
    }
}

function refreshCart() {
    const cartDrawer = document.getElementById('CartDrawer');

    if (cartDrawer) {
      const xhr = new XMLHttpRequest();
      xhr.open('GET', window.location.href);
      xhr.onload = () => {
        if (xhr.status === 200) {
          const parser = new DOMParser();
          const responseDoc = parser.parseFromString(xhr.responseText, 'text/html');
          const newContent = responseDoc.querySelector('#CartDrawer');
          if (newContent) {
            cartDrawer.innerHTML = newContent.innerHTML;
            document.querySelectorAll(".cart-item .loading__spinner").forEach(el => {
              el.classList.add("hidden");
            });
            fetch('/cart.js', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json'
            }
           })
            .then(response => {
              if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
              }
              return response.json();
            })
            .then(cartData => {
              
              checkAndToggleCheckoutButtons(cartData);
            })
          }
        }
      };
      xhr.send();
    }
  }

function checkAndToggleCheckoutButtons(cart) {
    if (!cart) return;

    const approvalRequired = cart.total_price >= window.draftorder_threshold;

    const checkoutButtons = document.querySelectorAll('button[name="checkout"]');
    for (const btn of checkoutButtons) {
      if (approvalRequired) {
        console.log('Disabling checkout due to approval flag');
        btn.classList.add("hidden");
        document.querySelectorAll("#create-draft-order").forEach(el => {
          el.classList.remove("hidden");
        });
      } else {
        console.log('Enabling checkout (no approval required)');
        document.querySelectorAll("#create-draft-order").forEach(el => {
          el.classList.add("hidden");
        });
        btn.classList.remove("hidden");
      }
    }
}


subscribe(PUB_SUB_EVENTS.cartUpdate, (event) => {
  fetch('/cart.js')
  .then(res => res.json())
  .then(cart => checkAndToggleCheckoutButtons(cart))
  .catch(err => console.error('Cart fetch failed:', err));
});


document.addEventListener('DOMContentLoaded', () => {
  
  const cartIcons = document.querySelectorAll('.header__icon--cart');

  for (const icon of cartIcons) {
    icon.addEventListener('click', () => {
      fetch('/cart.js')
        .then(res => res.json())
        .then(cart => checkAndToggleCheckoutButtons(cart))
        .catch(err => console.error('Cart fetch failed:', err));
    });
  }

  fetch('/cart.js')
  .then(res => res.json())
  .then(cart => checkAndToggleCheckoutButtons(cart))
  .catch(err => console.error('Cart fetch failed:', err));
});
}



